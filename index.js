const {
  Telegraf,
  Markup,
  Extra,
  Context,
  Scenes: { WizardScene, Stage, BaseScene },
  session,
  Scenes,
} = require("telegraf");
const moment = require("moment");
require("dotenv").config();

const bot = new Telegraf(process.env.BOT_TOKEN);
const startScene = new Scenes.BaseScene("startScene");
const black = new Scenes.BaseScene("black");
const removeChoice = new Scenes.BaseScene("removeChoice");
const recordClient = new Scenes.BaseScene("recordClient");
const nameClientSce = new Scenes.BaseScene("nameClientSce");
const removeChoiceAdmin = new Scenes.BaseScene("removeChoiceAdmin");
const worker = new Scenes.BaseScene("work");
const stage = new Stage([
  startScene,
  black,
  removeChoice,
  recordClient,
  nameClientSce,
  removeChoiceAdmin,
  worker,
]);

bot.use(Telegraf.log());
let adminMenu = [
  "–ó–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞",
  "–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–∞",
  "–†–∞–±–æ—Ç–∞ —Å —Ç–∞–±–ª–∏—Ü–µ–π",
];
bot.use(session());
bot.use(stage.middleware());
bot.hears("/start", Stage.enter("startScene"));
bot.hears("/777", Stage.enter("black"));
bot.hears("–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å", Stage.enter("removeChoice"));
bot.hears("–∑–∞–ø–∏—Å—å", Stage.enter("recordClient"));
bot.hears("—Å—Ç–∞—Ä—Ç", Stage.enter("recordClient"));
bot.hears("1", Stage.enter("recordClient"));
bot.hears("/run", Stage.enter("recordClient"));
bot.hears("–£–∫–∞–∑–∞—Ç—å –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞", Stage.enter("nameClientSce"));
bot.hears("–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å", Stage.enter("recordClient"));
bot.hears("–†–∞–±–æ—Ç–∞ —Å —Ç–∞–±–ª–∏—Ü–µ–π", Stage.enter("work"));

//bot.hears("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", Stage.enter("recordClient"));
bot.hears("/555", (ctx) =>
  ctx.reply(
    "–í—ã–±–∏—Ä–∞–π—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–∞–º",
    Markup.keyboard(adminMenu).oneTime().resize()
  )
);
bot.hears("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é", (ctx) =>
  ctx.reply(
    "–í—ã–±–∏—Ä–∞–π—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–∞–º",
    Markup.keyboard(adminMenu).oneTime().resize()
  )
);
bot.hears("–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–∞", Stage.enter("removeChoiceAdmin"));
bot.hears("–í—ã–±—Ä–∞—Ç—å –µ—â–µ –º–∞—Å—Ç–µ—Ä–∞", Stage.enter("work"));

//bot.help((ctx) => ctx.reply("Send me a sticker"));
//bot.on("sticker", (ctx) => ctx.reply("üëç"));
//bot.hears("hi", (ctx) => ctx.reply("Heloooooo"));
bot.launch();

// Enable graceful stop
process.once("SIGINT", () => bot.stop("SIGINT"));
process.once("SIGTERM", () => bot.stop("SIGTERM"));

const { google } = require("googleapis");
//const keys = require("./keys.json");
const idSheets = process.env.ID_SHEETS;
const GOOGLE_PRIVATE_KEY = process.env.GOOGLE_PRIVATE_KEY;
const GOOGLE_CLIENT_EMAIL = process.env.GOOGLE_CLIENT_EMAIL;

const client = new google.auth.JWT(
  GOOGLE_CLIENT_EMAIL,
  null,
  GOOGLE_PRIVATE_KEY,
  ["https://www.googleapis.com/auth/spreadsheets"]
);
//console.log(moment().format());
client.authorize(function (err, tokens) {
  if (err) {
    console.log(err);
    return;
  } else {
    console.log("Connected");
    gsrun(client);
  }
});
let timeCurrent1 = moment().format();
console.log(timeCurrent1);
async function gsrun(cl) {
  try {
    const gsapi = google.sheets({ version: "v4", auth: cl });
    metaData = await gsapi.spreadsheets.get({
      spreadsheetId: idSheets,
    });
    let listId = new Array();
    for (i = 2; i < metaData.data.sheets.length; i++) {
      listId.push(metaData.data.sheets[i].properties.sheetId);
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö —Ä–∞–±–æ—á–∏—Ö –ª–∏—Å—Ç–æ–≤

    let listSetting = new Array();
    for (i = 0; i < 2; i++) {
      listSetting.push(metaData.data.sheets[i].properties.title);
    }

    let listSheet = [];
    for (let i = 2; i < metaData.data.sheets.length; i++) {
      listSheet.push(metaData.data.sheets[i].properties.title);
    }
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –æ–æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º -------------------------------------------------------------------
    let dataBase = await gsapi.spreadsheets.values.batchGet({
      spreadsheetId: idSheets,
      ranges: [
        `${listSetting[1]}!A2:A`,
        `${listSheet[0]}!A4:A`,
        `${listSheet[0]}!3:3`,
        `${listSheet[0]}!2:2`,
        `${listSetting[1]}!B2:B`,
      ],
    });

    let serviceList = dataBase.data.valueRanges[0].values.flat();
    let numberRecords = dataBase.data.valueRanges[1].values.length;
    let timeArray = dataBase.data.valueRanges[1].values.flat();
    let dateSheets = dataBase.data.valueRanges[2].values.flat();
    let dateArr = dataBase.data.valueRanges[3].values.flat();
    let priceList = dataBase.data.valueRanges[4].values.flat();

    //  –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–π-–ª–∏—Å—Ç
    let textPrice = "";
    for (i = 0; i < serviceList.length; i++) {
      textPrice = textPrice + `${serviceList[i]} - ` + `${priceList[i]}` + "\n";
    }
    //------------------------------------------------------------/////////
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ 2 —Å –¥–∞—Ç–∞–º–∏
    //–ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∫–æ–ª–æ–Ω–∫–∏ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
    let columns = 1;
    for (let i = 0; i < dateArr.length; i++) {
      if (
        new Date().getMonth() + 1 + "/" + new Date().getDate() ===
        dateArr[i]
      ) {
        columns = columns + i;
        break;
      }
    }
    // ---------------------------
    let timeCurrentcheck = moment().format();
    let dateCheck = timeCurrentcheck[timeCurrentcheck.length - 14];
    if (dateCheck === "0") {
      dateCheck = Number(timeCurrentcheck[timeCurrentcheck.length - 13]);
    } else {
      dateCheck = Number(
        timeCurrentcheck[timeCurrentcheck.length - 14] +
          timeCurrentcheck[timeCurrentcheck.length - 13]
      );
    }
    dateCheck = dateCheck + 8;
    if (dateCheck > 19) {
      columns = columns + 1;
    }
    // ------------------------------------

    let dateAfterCurrentDate = dateArr.length - columns;

    //---------------------------
    //–ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
    let dataColumn = await gsapi.spreadsheets.values.get({
      spreadsheetId: idSheets,
      range: `${listSheet[0]}!R3C${columns}:R3C${
        columns + dateAfterCurrentDate
      }`,
    });
    let dateList = dataColumn.data.values.flat();
    let currentDay = dateList[0];

    let startBot = ["—Å—Ç–∞—Ä—Ç", "–∑–∞–ø–∏—Å—å", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", "1", "/run"];
    let anotherMaster = ["–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞"];
    let confirmEntry = ["–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å ‚úÖ"];
    let anotherService = ["–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —É—Å–ª—É–≥—É"];
    let anotherDate = ["–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É"];
    let anotherTime = ["–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è ‚òùÔ∏è"];
    let deleteRecord = ["–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å", "–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å"];
    let priceButton = ["–ü—Ä–∞–π—Å –ª–∏—Å—Ç"];
    let serviceChoice = ["–í—ã–±—Ä–∞—Ç—å —É—Å–ª—É–≥—É", "–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —É—Å–ª—É–≥—É"];
    let serviceButton = ["–í—ã–±—Ä–∞—Ç—å —É—Å–ª—É–≥—É"];
    let pointNameClient = ["–£–∫–∞–∑–∞—Ç—å –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞", "–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è ‚òùÔ∏è"];
    let clientRecord = ["–ó–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞"];
    let confirmRecordAdmin = ["–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–∞"];
    let recordNewButton = ["–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å"];
    // let listSheet = new Array();
    let deleteValues = {
      values: [""],
    };
    let dateListButton;
    let blackList = [];
    //–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞ –∞–¥–º–∏–Ω–æ–º ----------------
    removeChoiceAdmin.enter(async (chose) => {
      metaData = await gsapi.spreadsheets.get({
        spreadsheetId: idSheets,
      });

      listSheet = [];
      let sheets = metaData.data.sheets;
      for (let i = 2; i < sheets.length; i++) {
        listSheet.push(metaData.data.sheets[i].properties.title);
      }
      let listSetting = new Array();
      for (i = 0; i < 2; i++) {
        listSetting.push(metaData.data.sheets[i].properties.title);
      }
      let dataBase = await gsapi.spreadsheets.values.batchGet({
        spreadsheetId: idSheets,
        ranges: [
          `${listSetting[0]}!E1:E`,
          `${listSheet[0]}!A4:A`,
          `${listSheet[0]}!3:3`,
          `${listSheet[0]}!2:2`,
          `${listSetting[0]}!G1:G`,
        ],
      });

      let numberRecords = dataBase.data.valueRanges[1].values.length;
      let timeArray = dataBase.data.valueRanges[1].values.flat();
      let dateSheets = dataBase.data.valueRanges[2].values.flat();
      let dateArr = dataBase.data.valueRanges[3].values.flat();
      let adminMessage = dataBase.data.valueRanges[0].values.flat();
      let masterName = dataBase.data.valueRanges[4].values.flat();
      let timeSheets = dataBase.data.valueRanges[1].values.flat();

      await chose.reply(
        "–í—ã–±–µ—Ä–µ—Ç–∏ –º–∞—Å—Ç–µ—Ä–∞, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å",
        Markup.keyboard(listSheet).oneTime().resize()
      );

      removeChoiceAdmin.on("message", async (chose) => {
        let checkMessage = chose.update.message.text;
        let buttonDelete = ["–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å"];

        if (listSheet.includes(checkMessage)) {
          indexMaster = chose.update.message.text;
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ 2 —Å –¥–∞—Ç–∞–º–∏
          let columns = 1;
          for (let i = 0; i < dateArr.length; i++) {
            if (
              new Date().getMonth() + 1 + "/" + new Date().getDate() ===
              dateArr[i]
            ) {
              columns = columns + i;
              break;
            }
          }
          // ---------------------------
          let timeCurrentcheck = moment().format();
          let dateCheck = timeCurrentcheck[timeCurrentcheck.length - 14];
          if (dateCheck === "0") {
            dateCheck = Number(timeCurrentcheck[timeCurrentcheck.length - 13]);
          } else {
            dateCheck = Number(
              timeCurrentcheck[timeCurrentcheck.length - 14] +
                timeCurrentcheck[timeCurrentcheck.length - 13]
            );
          }
          dateCheck = dateCheck + 8;
          if (dateCheck > 19) {
            columns = columns + 1;
          }
          let dateAfterCurrentDate = dateArr.length - columns;
          //---------------------------
          //–ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
          let dataColumn = await gsapi.spreadsheets.values.get({
            spreadsheetId: idSheets,
            range: `${listSheet[0]}!R3C${columns}:R3C${
              columns + dateAfterCurrentDate
            }`,
          });
          dateList = dataColumn.data.values.flat();
          dateListButton = anotherMaster.concat(dateList);
          currentDay = dateList[0];
          chose.telegram.sendMessage(
            chose.chat.id,
            "–í—ã–±—Ä–∞–Ω –º–∞—Å—Ç–µ—Ä: " +
              `${indexMaster}` +
              "\n" +
              "–ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –±—ã–ª–∞ —Å–¥–µ–ª–∞–Ω–∞ –∑–∞–ø–∏—Å—å",
            Markup.keyboard(dateListButton).oneTime().resize()
          );
        } else if (anotherMaster.includes(checkMessage)) {
          chose.reply(
            "–í—ã–±–µ—Ä–µ—Ç–∏ –º–∞—Å—Ç–µ—Ä–∞, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å",
            Markup.keyboard(listSheet).oneTime().resize()
          );
        } else if (anotherDate.includes(checkMessage)) {
          chose.telegram.sendMessage(
            chose.chat.id,
            "–í—ã–±—Ä–∞–Ω –º–∞—Å—Ç–µ—Ä: " +
              `${indexMaster}` +
              "\n" +
              "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –±—ã–ª–∞ —Å–¥–µ–ª–∞–Ω–∞ –∑–∞–ø–∏—Å—å",
            Markup.keyboard(dateListButton).oneTime().resize()
          );
        } else if (checkMessage == currentDay) {
          indexDate = chose.update.message.text;
          let timeCurrent = moment().format();

          let timeCheck = timeCurrent[timeCurrent.length - 14];
          if (timeCheck === "0") {
            timeCheck = Number(timeCurrent[timeCurrent.length - 13]);
          } else {
            timeCheck = Number(
              timeCurrent[timeCurrent.length - 14] +
                timeCurrent[timeCurrent.length - 13]
            );
          }
          timeCheck = timeCheck + 8;
          if (timeCheck >= 19) {
            timeCheck = 8;
          }

          let time = "";
          let row = 0;
          for (i = 0; i < timeSheets.length; i++) {
            if (timeSheets[i][0] === "1") {
              time = timeSheets[i][0] + timeSheets[i][1];
              row = row + 1;
            } else {
              time = timeSheets[i][0];
              row = row + 1;
            }

            if (Number(time) === Number(timeCheck)) {
              break;
            }
          }

          let column = 1;
          for (let i = 0; i < dateSheets.length; i++) {
            if (indexDate === dateSheets[i]) {
              column = column + i;
              break;
            }
          }
          // –û–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –∫–æ–ª–æ–Ω–∫—É —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–æ–π
          indexColumn = column;
          //console.log(column);
          let timeColumn = await gsapi.spreadsheets.values.get({
            spreadsheetId: idSheets,
            range: `${indexMaster}!R4C${column}:R${
              numberRecords + 4
            }C${column}`,
          });

          //–û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–Ω—è—Ç–æ–µ –≤—Ä–µ–º—è
          let timeArr = [];
          for (i = row + 2; i < numberRecords; i++) {
            if (timeColumn.data.values[i] == "") {
            } else {
              let itemss = timeArray[i];
              timeArr = timeArr.concat(itemss);
            }
          }
          //–î–æ–±–∞–≤–ª–µ–º –∫ –º–∞—Å—Å–∏–≤—É –≤—Ä–µ–º–µ–Ω–∏ –≤–æ–∑–≤—Ä–∞—Ç –∫ –¥–∞—Ç–µ
          let items = timeArr;
          let itemsDop = ["–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É"];
          Array.prototype.push.apply(items, itemsDop);

          chose.telegram.sendMessage(
            chose.chat.id,
            "–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: " +
              `${indexDate}` +
              "\n–ù–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –±—ã–ª–∞ —Å–¥–µ–ª–∞–Ω–∞ –∑–∞–ø–∏—Å—å?",
            Markup.keyboard(items).oneTime().resize()
          );
        } else if (dateList.includes(checkMessage)) {
          indexDate = chose.update.message.text;
          let column = 1;
          for (let i = 0; i < dateSheets.length; i++) {
            if (indexDate === dateSheets[i]) {
              column = column + i;
              break;
            }
          }

          // –û–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –∫–æ–ª–æ–Ω–∫—É —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–æ–π
          indexColumn = column;
          console.log(column);
          let timeColumn = await gsapi.spreadsheets.values.get({
            spreadsheetId: idSheets,
            range: `${indexMaster}!R4C${column}:R${
              numberRecords + 4
            }C${column}`,
          });
          //–û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–Ω—è—Ç–æ–µ –≤—Ä–µ–º—è
          let timeArr = [];
          for (i = 0; i < numberRecords; i++) {
            if (timeColumn.data.values[i] == "") {
            } else {
              let itemss = timeArray[i];
              timeArr = timeArr.concat(itemss);
            }
          }
          //–î–æ–±–∞–≤–ª–µ–º –∫ –º–∞—Å—Å–∏–≤—É –≤—Ä–µ–º–µ–Ω–∏ –≤–æ–∑–≤—Ä–∞—Ç –∫ –¥–∞—Ç–µ
          let items = timeArr;
          let itemsDop = ["–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É"];
          Array.prototype.push.apply(items, itemsDop);
          chose.telegram.sendMessage(
            chose.chat.id,
            "–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: " +
              `${indexDate}` +
              "\n–ù–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –±—ã–ª–∞ —Å–¥–µ–ª–∞–Ω–∞ –∑–∞–ø–∏—Å—å?",
            Markup.keyboard(items).oneTime().resize()
          );
        } else if (anotherTime.includes(checkMessage)) {
          let column = 1;
          for (let i = 0; i < dateArr.length; i++) {
            if (indexDate === dateSheets[i]) {
              column = column + i;
              break;
            }
          }
          // –û–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –∫–æ–ª–æ–Ω–∫—É —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–æ–π
          indexColumn = column;

          let timeColumn = await gsapi.spreadsheets.values.get({
            spreadsheetId: idSheets,
            range: `${indexMaster}!R4C${column}:R${
              numberRecords + 4
            }C${column}`,
          });

          //–û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–Ω—è—Ç–æ–µ –≤—Ä–µ–º—è
          let timeArr = [];
          for (i = 0; i < numberRecords; i++) {
            if (timeColumn.data.values[i] == "") {
            } else {
              let itemss = timeArray[i];
              timeArr = timeArr.concat(itemss);
            }
          }
          //–î–æ–±–∞–≤–ª–µ–º –∫ –º–∞—Å—Å–∏–≤—É –≤—Ä–µ–º–µ–Ω–∏ –≤–æ–∑–≤—Ä–∞—Ç –∫ –¥–∞—Ç–µ
          let items = timeArr;
          let itemsDop = ["–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É"];
          Array.prototype.push.apply(items, itemsDop);

          chose.telegram.sendMessage(
            chose.chat.id,
            "–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: " +
              `${indexDate}` +
              "\n–ù–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –±—ã–ª–∞ —Å–¥–µ–ª–∞–Ω–∞ –∑–∞–ø–∏—Å—å?",
            Markup.keyboard(items).oneTime().resize()
          );
        } else if (timeArray.includes(checkMessage)) {
          indexTime = chose.update.message.text;
          //–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∑–∞–ø–∏—Å–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ –≤—Å–µ–≥–æ –º–∞—Å—Å–∏–≤–∞ –≤—Ä–µ–º–µ–Ω–∏
          let rowTime = 4;
          for (i = 0; i < timeArray.length; i++) {
            if (indexTime == timeArray[i]) {
              rowTime = rowTime + i;
              indexRow = rowTime;
              break;
            }
          }
          let buttonTime = [
            "–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å",
            "–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è ‚òùÔ∏è",
          ];

          chose.telegram.sendMessage(
            chose.chat.id,
            "–ó–∞–ø–∏—Å—å, –≤—ã–±—Ä–∞–Ω–Ω–∞—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: \n–ú–∞—Å—Ç–µ—Ä: " +
              `${indexMaster}` +
              "\n–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏: " +
              `${indexDate}` +
              "\n–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏: " +
              `${indexTime}`,
            Markup.keyboard(buttonTime).oneTime().resize()
          );
        } else if (buttonDelete.includes(checkMessage)) {
          let RecordDelete = {
            values: [""],
          };
          const updateOptions = {
            spreadsheetId: idSheets,
            range: `${indexMaster}!R${indexRow}C${indexColumn}:R${indexRow}C${indexColumn}`,
            valueInputOption: "USER_ENTERED",
            resource: { values: RecordDelete },
          };
          await gsapi.spreadsheets.values.update(updateOptions);

          //–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
          for (let m = 1; m < adminMessage.length; m++) {
            chose.telegram.sendMessage(
              adminMessage[m],
              "–£–¥–∞–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å:\n–ú–∞—Å—Ç–µ—Ä: " +
                `${indexMaster}` +
                "\n–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏: " +
                `${indexDate}` +
                "\n–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏: " +
                `${indexTime}`,
              Markup.keyboard(adminMenu).oneTime().resize()
            );
          }
          //–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞
          for (let m = 1; m < masterName.length; m++) {
            if (`${masterName[m]}` == `${indexMaster}`) {
              let masterIdArr = await gsapi.spreadsheets.values.get({
                spreadsheetId: idSheets,
                range: `${listSetting[0]}!F1:F`,
              });
              let masterId = masterIdArr.data.values.flat()[m];
              chose.telegram.sendMessage(
                masterId,
                "–£–¥–∞–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å: " +
                  "\n–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏: " +
                  `${indexDate}` +
                  "\n–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏: " +
                  `${indexTime}`
              );
              break;
            }
          }
          return chose.scene.leave();
        } else {
          return;
        }
      });
    });

    //–ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ü–µ–Ω–∞ (–∫–æ–º–∞–Ω–¥–∞ /start)
    startScene.enter(async (ctx) => {
      text = ctx.message.text;
      console.log(text);
      nameClient = ctx.chat.first_name;
      idClient = ctx.chat.id.toString();
      let check = ctx.chat.id.toString();
      let metaData = await gsapi.spreadsheets.get({
        spreadsheetId: idSheets,
      });
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö —Ä–∞–±–æ—á–∏—Ö –ª–∏—Å—Ç–æ–≤
      let listSetting = new Array();
      for (i = 0; i < 2; i++) {
        listSetting.push(metaData.data.sheets[i].properties.title);
      }
      let dataBaseStart = await gsapi.spreadsheets.values.batchGet({
        spreadsheetId: idSheets,
        ranges: [`${listSetting[0]}!D1:D`, `${listSetting[0]}!A1:A`],
      });
      // –§–æ—Ä–º–∏—Ä—É–µ–º —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
      let blackList = dataBaseStart.data.valueRanges[0].values.flat();
      numberClient = dataBaseStart.data.valueRanges[1].values.length;

      if (blackList.includes(check)) {
        return ctx.scene.leave();
      }
      let dateRecord = {
        values: [`${idClient}`, `${nameClient}`],
      };
      if (dataBaseStart.data.valueRanges[1].values.flat().includes(idClient)) {
        ctx.reply(
          "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å " +
            `${nameClient}` +
            '.üôè \n–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Å–ª—É–≥—É –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å" –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "–∑–∞–ø–∏—Å—å" (–ø–∏—à–µ–º –±–µ–∑ –∫–∞–≤—ã—á–µ–∫).',
          Markup.keyboard(recordNewButton).oneTime().resize()
        );
        return ctx.scene.leave();
      } else {
        const updateOptions = {
          spreadsheetId: idSheets,
          range: `${listSetting[0]}!R${numberClient + 1}C1:R${
            numberClient + 1
          }C3`,
          valueInputOption: "USER_ENTERED",
          resource: { values: dateRecord },
        };
        await gsapi.spreadsheets.values.update(updateOptions);
        //if (
        //  dataBaseStart.data.valueRanges[1].values.flat().includes(`${idClient}`)
        //) {
        ctx.reply(
          "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å " +
            `${nameClient}` +
            '.üôè \n–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Å–ª—É–≥—É –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å" –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "–∑–∞–ø–∏—Å—å" (–ø–∏—à–µ–º –±–µ–∑ –∫–∞–≤—ã—á–µ–∫).',
          Markup.keyboard(recordNewButton).oneTime().resize()
        );
        return ctx.scene.leave();
      }
    });
    //–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ -------------------
    black.enter(async (chose) => {
      let metaData = await gsapi.spreadsheets.get({
        spreadsheetId: idSheets,
      });
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö —Ä–∞–±–æ—á–∏—Ö –ª–∏—Å—Ç–æ–≤
      let listSetting = new Array();
      for (i = 0; i < 2; i++) {
        listSetting.push(metaData.data.sheets[i].properties.title);
      }
      //–ü—Ä–æ–≤–µ—Ä—è–º –Ω–∞ –∞–¥–º–∏–Ω—Å—Ç–≤–æ
      let dataBaseBlackList = await gsapi.spreadsheets.values.batchGet({
        spreadsheetId: idSheets,
        ranges: [`${listSetting[0]}!E1:E`, `${listSetting[0]}!D1:D`],
      });
      let checkId = chose.chat.id.toString();
      let adminChatIdArr = dataBaseBlackList.data.valueRanges[0].values.flat();
      //let numberRowBlackList =
      //  dataBaseBlackList.data.valueRanges[1].values.length;
      if (!adminChatIdArr.includes(checkId)) {
        chose.reply(
          '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –°–¥–µ–ª–∞–π—Ç–µ –≤—ã–±–æ—Ä –ø–æ –∫–Ω–æ–ø–∫–∞–º, –ª–∏–±–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ "—Å—Ç–∞—Ä—Ç" –∏–ª–∏ "–∑–∞–ø–∏—Å—å". –ü–∏—à–µ–º –±–µ–∑ –∫–∞–≤—ã—á–µ–∫'
        );
        return chose.scene.leave();
      }

      checkList = await gsapi.spreadsheets.values.get({
        spreadsheetId: idSheets,
        range: `${listSetting[0]}!D1:D`,
      });
      numberClient = checkList.data.values.length;
      await bot.telegram.sendMessage(
        chose.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ id, –±–ª–æ–∫–∏—Ä—É–µ–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. ID –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–∏–±–æ –≤ –≤–∞—à–∏—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏—è—Ö, –ª–∏–±–æ –≤ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü–µ "
      );
      black.on("message", async (chose) => {
        let indexIDBlack = chose.update.message.text;
        let regID = /^[1-9]+[0-9]*$/;
        if (regID.test(indexIDBlack)) {
          let RecordBlackId = {
            values: [`${indexIDBlack}`],
          };
          const updateOptions = {
            spreadsheetId: idSheets,
            range: `${listSetting[0]}!D${numberClient + 1}:D${
              numberClient + 1
            }`,
            valueInputOption: "USER_ENTERED",
            resource: { values: RecordBlackId },
          };
          await gsapi.spreadsheets.values.update(updateOptions);
          chose.reply("ID –≤–Ω–µ—Å–µ–Ω –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü—É");
          return chose.scene.leave();
        } else {
          await chose.reply(
            "–ù–æ–º–µ—Ä ID –≤–≤–µ–¥–µ–Ω –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ"
          );
        }
      });
    });
    //End —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫

    //  –¢–µ–ª–æ —Å–∞–º–æ–≥–æ –±–æ—Ç–∞ (—Ä–∞–±–æ—Ç–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º)
    recordClient.enter(async (chose) => {
      //let startBot = ["—Å—Ç–∞—Ä—Ç", "–∑–∞–ø–∏—Å—å", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", "1", "/run"];
      let checkMessage = chose.message.text;
      console.log(checkMessage);
      nameClient = chose.chat.first_name;
      let check = chose.chat.id.toString();
      chose.reply("...");

      let metaData = await gsapi.spreadsheets.get({
        spreadsheetId: idSheets,
      });

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö —Ä–∞–±–æ—á–∏—Ö –ª–∏—Å—Ç–æ–≤
      let listSetting = new Array();
      for (i = 0; i < 2; i++) {
        listSetting.push(metaData.data.sheets[i].properties.title);
      }
      listSheet = [];
      for (let i = 2; i < metaData.data.sheets.length; i++) {
        listSheet.push(metaData.data.sheets[i].properties.title);
      }
      listSheetButton = listSheet.concat(anotherService);
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –æ–æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º -------------------------------------------------------------------
      let dataBase = await gsapi.spreadsheets.values.batchGet({
        spreadsheetId: idSheets,
        ranges: [
          `${listSetting[1]}!A2:A`,
          `${listSheet[0]}!A4:A`,
          `${listSheet[0]}!3:3`,
          `${listSheet[0]}!2:2`,
          `${listSetting[1]}!B2:B`,
          `${listSetting[0]}!D1:D`,
        ],
      });
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
      serviceList = dataBase.data.valueRanges[0].values.flat();

      let dateArr = dataBase.data.valueRanges[3].values.flat();
      let priceList = dataBase.data.valueRanges[4].values.flat();
      let blackList = dataBase.data.valueRanges[5].values.flat();

      //  –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–π-–ª–∏—Å—Ç
      let textPrice = "";
      for (i = 0; i < serviceList.length; i++) {
        textPrice =
          textPrice +
          `‚úÖ ${serviceList[i]} - ` +
          `${priceList[i]} —Ä—É–±–ª–µ–π` +
          "\n";
      }
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ 2 —Å –¥–∞—Ç–∞–º–∏
      let columns = 1;
      for (let i = 0; i < dateArr.length; i++) {
        if (
          new Date().getMonth() + 1 + "/" + new Date().getDate() ===
          dateArr[i]
        ) {
          columns = columns + i;
          break;
        }
      }
      // ---------------------------
      let timeCurrentcheck = moment().format();
      let dateCheck = timeCurrentcheck[timeCurrentcheck.length - 14];
      if (dateCheck === "0") {
        dateCheck = Number(timeCurrentcheck[timeCurrentcheck.length - 13]);
      } else {
        dateCheck = Number(
          timeCurrentcheck[timeCurrentcheck.length - 14] +
            timeCurrentcheck[timeCurrentcheck.length - 13]
        );
      }
      dateCheck = dateCheck + 8;
      if (dateCheck > 19) {
        columns = columns + 1;
      }
      //–ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
      dataColumn = await gsapi.spreadsheets.values.get({
        spreadsheetId: idSheets,
        range: `${listSheet[0]}!R3C${columns}:R3C${dateArr.length}`,
      });
      dateList = dataColumn.data.values.flat();
      dateListButton = anotherMaster.concat(dateList);
      currentDay = dateList[0];

      if (blackList.includes(check)) {
        return chose.scene.leave();
      } else if (recordNewButton.includes(checkMessage)) {
        Array.prototype.push.apply(serviceList, priceButton);

        chose.telegram.sendMessage(
          chose.chat.id,
          "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ –∫–∞–∫—É—é —É—Å–ª—É–≥—É –≤–∞—Å –∑–∞–ø–∏—Å–∞—Ç—å üëá",
          Markup.keyboard(serviceList).oneTime().resize()
        );
      } else if (startBot.includes(checkMessage)) {
        Array.prototype.push.apply(serviceList, priceButton);
        chose.telegram.sendMessage(
          chose.chat.id,
          "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å " +
            `${nameClient}` +
            ".\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ –∫–∞–∫—É—é —É—Å–ª—É–≥—É –≤–∞—Å –∑–∞–ø–∏—Å–∞—Ç—å üëá",
          Markup.keyboard(serviceList).oneTime().resize()
        );
      }

      recordClient.on("message", async (chose) => {
        checkMessage = chose.message.text;
        //  console.log(checkMessage);
        //  console.log(currentDay[0]);
        let metaData = await gsapi.spreadsheets.get({
          spreadsheetId: idSheets,
        });

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö —Ä–∞–±–æ—á–∏—Ö –ª–∏—Å—Ç–æ–≤
        let listSetting = new Array();
        for (i = 0; i < 2; i++) {
          listSetting.push(metaData.data.sheets[i].properties.title);
        }
        listSheet = [];
        for (let i = 2; i < metaData.data.sheets.length; i++) {
          listSheet.push(metaData.data.sheets[i].properties.title);
        }
        listSheetButton = listSheet.concat(anotherService);
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –æ–æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º -------------------------------------------------------------------
        let dataBase = await gsapi.spreadsheets.values.batchGet({
          spreadsheetId: idSheets,
          ranges: [
            `${listSetting[1]}!A2:A`,
            `${listSheet[0]}!A4:A`,
            `${listSheet[0]}!3:3`,
            `${listSheet[0]}!2:2`,
            `${listSetting[1]}!B2:B`,
            `${listSetting[0]}!D1:D`,
          ],
        });
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
        let serviceList = dataBase.data.valueRanges[0].values.flat();
        let numberRecords = dataBase.data.valueRanges[1].values.length;
        let timeArray = dataBase.data.valueRanges[1].values.flat();
        let dateSheets = dataBase.data.valueRanges[2].values.flat();
        let dateArr = dataBase.data.valueRanges[3].values.flat();
        let priceList = dataBase.data.valueRanges[4].values.flat();
        let blackList = dataBase.data.valueRanges[5].values.flat();

        //  –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–π-–ª–∏—Å—Ç
        let textPrice = "";
        for (i = 0; i < serviceList.length; i++) {
          textPrice =
            textPrice +
            `‚úÖ ${serviceList[i]} - ` +
            `${priceList[i]} —Ä—É–±–ª–µ–π` +
            "\n";
        }

        if (blackList.includes(check)) {
          return chose.scene.leave();
        } else if (startBot.includes(checkMessage)) {
          Array.prototype.push.apply(serviceList, priceButton);
          chose.telegram.sendMessage(
            chose.chat.id,
            "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å " +
              `${nameClient}` +
              ".\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ –∫–∞–∫—É—é —É—Å–ª—É–≥—É –≤–∞—Å –∑–∞–ø–∏—Å–∞—Ç—å üëá",
            Markup.keyboard(serviceList).oneTime().resize()
          );
        } else if (priceButton.includes(checkMessage)) {
          chose.telegram.sendMessage(
            chose.chat.id,
            textPrice,
            Markup.keyboard(serviceButton).oneTime().resize()
          );
        } else if (serviceChoice.includes(checkMessage)) {
          nameClient = chose.chat.first_name;
          chose.telegram.sendMessage(
            chose.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ –∫–∞–∫—É—é —É—Å–ª—É–≥—É –≤–∞—Å –∑–∞–ø–∏—Å–∞—Ç—å üëá",
            Markup.keyboard(serviceList).oneTime().resize()
          );
        } else if (serviceList.includes(checkMessage)) {
          indexService = chose.update.message.text;
          chose.telegram.sendMessage(
            chose.chat.id,
            "–ö –∫–∞–∫–æ–º—É –º–∞—Å—Ç–µ—Ä—É –≤–∞—Å –∑–∞–ø–∏—Å–∞—Ç—å üíÅ‚Äç‚ôÇÔ∏è",
            Markup.keyboard(listSheetButton).oneTime().resize()
          );
        } else if (anotherMaster.includes(checkMessage)) {
          chose.telegram.sendMessage(
            chose.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞ üíÅ‚Äç‚ôÄÔ∏è",
            Markup.keyboard(listSheetButton).oneTime().resize()
          );
        } else if (listSheet.includes(checkMessage)) {
          indexMaster = chose.update.message.text;
          chose.telegram.sendMessage(
            chose.chat.id,
            "–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–∞—Å—Ç–µ—Ä–∞: " +
              `${indexMaster}` +
              "\n" +
              "–ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞–ª–∏—á–∏–µ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–∞—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ ..."
          );
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ 2 —Å –¥–∞—Ç–∞–º–∏
          dataSheets = await gsapi.spreadsheets.values.get({
            spreadsheetId: idSheets,
            range: `${indexMaster}!2:2`,
          });
          dateArr = dataSheets.data.values.flat();
          let columns = 1;
          for (let i = 0; i < dateArr.length; i++) {
            if (
              new Date().getMonth() + 1 + "/" + new Date().getDate() ===
              dateArr[i]
            ) {
              columns = columns + i;
              break;
            }
          }
          // ---------------------------
          let timeCurrentcheck = moment().format();
          let dateCheck = timeCurrentcheck[timeCurrentcheck.length - 14];
          if (dateCheck === "0") {
            dateCheck = Number(timeCurrentcheck[timeCurrentcheck.length - 13]);
          } else {
            dateCheck = Number(
              timeCurrentcheck[timeCurrentcheck.length - 14] +
                timeCurrentcheck[timeCurrentcheck.length - 13]
            );
          }
          dateCheck = dateCheck + 8;
          if (dateCheck > 19) {
            columns = columns + 1;
          }

          //–ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
          // –ò—â–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ –¥–∞—Ç—ã
          let dateFree = [];
          let dataColumn = await gsapi.spreadsheets.values.get({
            spreadsheetId: idSheets,
            range: `${indexMaster}!R3C${columns}:R26C${dateArr.length}`,
          });
          let dateList = dataColumn.data.values;
          for (i = 0; i <= dateArr.length - columns; i++) {
            for (b = 1; b < 24; b++) {
              if (dateList[b][i] == "") {
                dateFree = dateFree.concat(dateList[0][i]);
                break;
              }
            }
          }
          dateListButton = anotherMaster.concat(dateFree);
          currentDay = dateList[0][0];

          chose.telegram.sendMessage(
            chose.chat.id,
            "üóì–°–≤–æ–±–æ–¥–Ω—ã–µ –¥–Ω–∏. –ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –≤–∞—Å –∑–∞–ø–∏—Å–∞—Ç—å?",
            Markup.keyboard(dateListButton).oneTime().resize()
          );
        } else if (anotherDate.includes(checkMessage)) {
          chose.telegram.sendMessage(
            chose.chat.id,
            "–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–∞—Å—Ç–µ—Ä–∞: " +
              `${indexMaster}` +
              "\n" +
              "–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É üìÜ:",
            Markup.keyboard(dateListButton).oneTime().resize()
          );
        } else if (checkMessage == currentDay) {
          indexDate = chose.update.message.text;
          let timeCurrent = moment().format();
          console.log(moment().format());
          let timeCheck = timeCurrent[timeCurrent.length - 14];
          if (timeCheck === "0") {
            timeCheck = Number(timeCurrent[timeCurrent.length - 13]);
          } else {
            timeCheck = Number(
              timeCurrent[timeCurrent.length - 14] +
                timeCurrent[timeCurrent.length - 13]
            );
          }
          timeCheck = timeCheck + 8;
          if (timeCheck >= 19) {
            timeCheck = 8;
          }
          let dataBaseSheet = await gsapi.spreadsheets.values.batchGet({
            spreadsheetId: idSheets,
            ranges: [`${indexMaster}!A4:A`, `${indexMaster}!3:3`],
          });
          dateSheets = dataBaseSheet.data.valueRanges[1].values.flat();
          numberRecords = dataBaseSheet.data.valueRanges[0].values.length;
          timeArray = dataBaseSheet.data.valueRanges[0].values.flat();

          let time = "";
          let row = 0;
          for (i = 0; i < timeArray.length; i++) {
            if (timeArray[i][0] === "1") {
              time = timeArray[i][0] + timeArray[i][1];
              //  console.log(Number(time));
              row = row + 1;
            } else {
              time = timeArray[i][0];
              //  console.log(Number(time));
              row = row + 1;
            }

            if (Number(time) === Number(timeCheck)) {
              console.log(row);
              break;
            }
          }
          // –û–ø—Ä–µ–¥–µ–ª–∏–º –∫–æ–ª–æ–Ω–∫—É —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
          let column = 1;
          for (let i = 0; i < dateSheets.length; i++) {
            if (indexDate === dateSheets[i]) {
              column = column + i;
              break;
            }
          }

          indexColumn = column;
          //console.log(column);
          let timeColumn = await gsapi.spreadsheets.values.get({
            spreadsheetId: idSheets,
            range: `${indexMaster}!R4C${column}:R${
              numberRecords + 4
            }C${column}`,
          });

          //–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è
          let timeArr = [];
          for (i = row + 2; i < numberRecords + 4; i++) {
            if (timeColumn.data.values[i] == "") {
              let itemss = timeArray[i];
              timeArr = timeArr.concat(itemss);
            }
          }

          //–î–æ–±–∞–≤–ª–µ–º –∫ –º–∞—Å—Å–∏–≤—É –≤—Ä–µ–º–µ–Ω–∏ –≤–æ–∑–≤—Ä–∞—Ç –∫ –¥–∞—Ç–µ
          let items = timeArr;
          let itemsDop = ["–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É"];
          Array.prototype.push.apply(items, itemsDop);
          //let dateList = dataColumn.data.values.flat();
          chose.telegram.sendMessage(
            chose.chat.id,
            "–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: " +
              `${indexDate}` +
              ". \n –ù–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –≤–∞—Å –∑–∞–ø–∏—Å–∞—Ç—å?‚è∞",
            Markup.keyboard(items).oneTime().resize()
          );
          //});
        } else if (dateList.includes(checkMessage)) {
          indexDate = chose.update.message.text;
          console.log("–Ø —Ç—É—Ç .......");
          chose.telegram.sendMessage(
            chose.chat.id,
            "–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: " +
              `${indexDate}` +
              "\n" +
              "–ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞–ª–∏—á–∏–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –¥–∞–Ω–Ω—É—é –¥–∞—Ç—É..."
          );
          let dataBaseSheet = await gsapi.spreadsheets.values.batchGet({
            spreadsheetId: idSheets,
            ranges: [`${indexMaster}!A4:A`, `${indexMaster}!3:3`],
          });
          dateSheets = dataBaseSheet.data.valueRanges[1].values.flat();
          numberRecords = dataBaseSheet.data.valueRanges[0].values.length;
          timeArray = dataBaseSheet.data.valueRanges[0].values.flat();

          let column = 1;
          for (let i = 0; i < dateSheets.length; i++) {
            if (indexDate === dateSheets[i]) {
              column = column + i;

              break;
            }
          }

          // –û–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –∫–æ–ª–æ–Ω–∫—É —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–æ–π
          indexColumn = column;
          //console.log(column);
          let timeColumn = await gsapi.spreadsheets.values.get({
            spreadsheetId: idSheets,
            range: `${indexMaster}!R4C${column}:R${
              numberRecords + 4
            }C${column}`,
          });

          //–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è
          let timeArr = [];
          for (i = 0; i < numberRecords + 4; i++) {
            if (timeColumn.data.values[i] == "") {
              let itemss = timeArray[i];
              timeArr = timeArr.concat(itemss);
            }
          }
          //–î–æ–±–∞–≤–ª–µ–º –∫ –º–∞—Å—Å–∏–≤—É –≤—Ä–µ–º–µ–Ω–∏ –≤–æ–∑–≤—Ä–∞—Ç –∫ –¥–∞—Ç–µ
          let items = timeArr;
          let itemsDop = ["–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É"];
          Array.prototype.push.apply(items, itemsDop);
          //let dateList = dataColumn.data.values.flat();
          chose.telegram.sendMessage(
            chose.chat.id,
            "–ù–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –≤–∞—Å –∑–∞–ø–∏—Å–∞—Ç—å?",
            Markup.keyboard(items).oneTime().resize()
          );
          //});
        } else if (anotherTime.includes(checkMessage)) {
          let column = 1;
          for (let i = 0; i < dateArr.length; i++) {
            if (indexDate === dateSheets[i]) {
              column = column + i;
              break;
            }
          }
          // –û–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –∫–æ–ª–æ–Ω–∫—É —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–æ–π
          //console.log(column);
          indexColumn = column;

          let timeColumn = await gsapi.spreadsheets.values.get({
            spreadsheetId: idSheets,
            range: `${indexMaster}!R4C${column}:R${
              numberRecords + 4
            }C${column}`,
          });

          //–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è
          let timeArr = [];
          for (i = 0; i < numberRecords + 4; i++) {
            if (timeColumn.data.values[i] == "") {
              let itemss = timeArray[i];
              timeArr = timeArr.concat(itemss);
            }
          }
          //–î–æ–±–∞–≤–ª–µ–º –∫ –º–∞—Å—Å–∏–≤—É –≤—Ä–µ–º–µ–Ω–∏ –≤–æ–∑–≤—Ä–∞—Ç –∫ –¥–∞—Ç–µ
          let items = timeArr;
          let itemsDop = ["–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É"];
          Array.prototype.push.apply(items, itemsDop);
          //let dateList = dataColumn.data.values.flat();
          chose.telegram.sendMessage(
            chose.chat.id,
            "–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: " +
              `${indexDate}` +
              ". \nüï∞–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è.",
            Markup.keyboard(items).oneTime().resize()
          );
          //});
        } else if (timeArray.includes(checkMessage)) {
          indexTime = chose.update.message.text;

          let rowTime = 4;
          for (i = 0; i < timeArray.length; i++) {
            if (indexTime == timeArray[i]) {
              rowTime = rowTime + i;
              indexRow = rowTime;
              break;
            }
          }
          let buttonTime = [
            "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å ‚úÖ",
            //"–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ",
            "–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è ‚òùÔ∏è",
          ];

          chose.telegram.sendMessage(
            chose.chat.id,
            "–í—ã –≤—ã–±—Ä–∞–ª–∏: \n–ú–∞—Å—Ç–µ—Ä üíÅ‚Äç‚ôÇÔ∏è: " +
              `${indexMaster}` +
              "\n–£—Å–ª—É–≥–∞ ‚úÇÔ∏è: " +
              `${indexService}` +
              "\n–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏ üóì: " +
              `${indexDate}` +
              "\n–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ ‚è∞: " +
              `${indexTime}`,
            Markup.keyboard(buttonTime).oneTime().resize()
          );
        } else if (confirmEntry.includes(checkMessage)) {
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ –≤—Ä–µ–º—è –∏–ª–∏ –Ω–µ—Ç
          let checkFreeArr = await gsapi.spreadsheets.values.get({
            spreadsheetId: idSheets,
            range: `${indexMaster}!R${indexRow}C${indexColumn}:R${indexRow}C${indexColumn}`,
          });
          let checkFree = checkFreeArr.data.values;
          if (checkFree === undefined) {
            // –ó–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É
            let idListArr = await gsapi.spreadsheets.values.get({
              spreadsheetId: idSheets,
              range: `${listSetting[0]}!A2:A`,
            });
            let idList = idListArr.data.values.flat();
            let checkIdClient;
            // let scoreId = 0;
            for (i = 0; i < idList.length; i++) {
              checkIdClient = idList[i];
              if (checkIdClient == chose.chat.id) {
                scoreId = i;
                break;
              }
            }

            //let indexPhoneArr = await gsapi.spreadsheets.values.get({
            //  spreadsheetId: idSheets,
            //  range: `${listSetting[0]}!R${scoreId + 2}C3:R${scoreId + 2}C3`,
            //});
            //indexPhone = indexPhoneArr.data.values.flat();

            let dateRecord = {
              values: [
                "–ö–ª–∏–µ–Ω—Ç: " + `${nameClient}` + "\n–£—Å–ª—É–≥–∞: " + `${indexService}`,
                //"\n–¢–µ–ª–µ—Ñ–æ–Ω: " +
                //`${indexPhone}`,
              ],
            };
            const updateOptions = {
              spreadsheetId: idSheets,
              range: `${indexMaster}!R${indexRow}C${indexColumn}:R${indexRow}C${indexColumn}`,
              valueInputOption: "USER_ENTERED",
              resource: { values: dateRecord },
            };
            await gsapi.spreadsheets.values.update(updateOptions);

            chose.telegram.sendMessage(
              chose.chat.id,
              "–û—Ç–ª–∏—á–Ω–æ. –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã üíÅ‚Äç‚ôÇÔ∏è:\n–ú–∞—Å—Ç–µ—Ä: " +
                `${indexMaster}` +
                "\n–£—Å–ª—É–≥–∞ ‚úÇÔ∏è: " +
                `${indexService}` +
                "\n–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏ üóì: " +
                `${indexDate}` +
                "\n–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ ‚è∞:" +
                `${indexTime}`,
              Markup.keyboard(deleteRecord).oneTime().resize()
            );
            //–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            adminChatIdArr = await gsapi.spreadsheets.values.get({
              spreadsheetId: idSheets,
              range: `${listSetting[0]}!E1:E`,
            });
            let adminMessage = adminChatIdArr.data.values.flat();
            for (let m = 1; m < adminMessage.length; m++) {
              chose.telegram.sendMessage(
                adminMessage[m],
                "–ü–æ—è–≤–∏–ª–∞—Å—å –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å:\n–ú–∞—Å—Ç–µ—Ä: " +
                  `${indexMaster}` +
                  "\n–ö–ª–∏–µ–Ω—Ç: " +
                  `${nameClient}` +
                  "\n–£—Å–ª—É–≥–∞: " +
                  `${indexService}` +
                  "\n–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏: " +
                  `${indexDate}` +
                  "\n–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏: " +
                  `${indexTime}` +
                  //"\n–¢–µ–ª–µ—Ñ–æ–Ω: " +
                  //`${indexPhone}` +
                  "\nID: " +
                  `${chose.chat.id}`
              );
            }
            //–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞
            let masterNameArr = await gsapi.spreadsheets.values.get({
              spreadsheetId: idSheets,
              range: `${listSetting[0]}!G1:G`,
            });
            let masterName = masterNameArr.data.values.flat();
            for (let m = 1; m < masterName.length; m++) {
              if (`${masterName[m]}` == `${indexMaster}`) {
                let masterIdArr = await gsapi.spreadsheets.values.get({
                  spreadsheetId: idSheets,
                  range: `${listSetting[0]}!F1:F`,
                });
                let masterId = masterIdArr.data.values.flat()[m];
                chose.telegram.sendMessage(
                  masterId,
                  "–ü–æ—è–≤–∏–ª–∞—Å—å –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å: " +
                    "\n–ö–ª–∏–µ–Ω—Ç: " +
                    `${nameClient}` +
                    "\n–£—Å–ª—É–≥–∞: " +
                    `${indexService}` +
                    "\n–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏: " +
                    `${indexDate}` +
                    "\n–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏: " +
                    `${indexTime}`
                );
                break;
              }
            }
            //–†–∞–±–æ—á–∞—è –∑–∞–ø–∏—Å—å (–ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç) –≤ —Ç–∞–±–ª–∏—Ü—É —Ç–µ–∫—É—â–µ–π –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞
            let clientBaseIdAr = await gsapi.spreadsheets.values.get({
              spreadsheetId: idSheets,
              range: `${listSetting[0]}!A1:A`,
            });
            let clientBaseId = clientBaseIdAr.data.values.flat();
            for (let n = 1; n < clientBaseId.length; n++) {
              if (`${clientBaseId[n]}` == `${chose.chat.id}`) {
                let dateRecordClientTable = {
                  values: [
                    `${nameClient}`,
                    `${indexDate}`,
                    `${indexTime}`,
                    `${indexMaster}`,
                    `${indexService}`,
                    `${indexRow}`,
                    `${indexColumn}`,
                  ],
                };
                const updateOptions1 = {
                  spreadsheetId: idSheets,
                  range: `${listSetting[0]}!R${n + 1}C8:R${n + 1}C14`,
                  valueInputOption: "USER_ENTERED",
                  resource: { values: dateRecordClientTable },
                };
                await gsapi.spreadsheets.values.update(updateOptions1);
                break;
              }
            }
            //–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –∑–∞ —á–∞—Å
            let mmsHours = 3600000;
            let timeZone = 8;
            let dateRec = indexDate[indexDate.length - 5];
            if (dateRec === "0") {
              dateRec = indexDate[indexDate.length - 4];
            } else {
              dateRec =
                indexDate[indexDate.length - 5] +
                indexDate[indexDate.length - 4];
            }

            let monthRec = indexDate[indexDate.length - 2];
            if (monthRec === "0") {
              monthRec = indexDate[indexDate.length - 1] - 1;
            } else {
              monthRec =
                indexDate[indexDate.length - 2] +
                indexDate[indexDate.length - 1] -
                1;
            }

            let minutesRec =
              indexTime[indexTime.length - 2] + indexTime[indexTime.length - 1];
            if (minutesRec === "0") {
              minutesRec = 0;
            }
            let hoursRec = indexTime[indexTime.length - 5];
            if (hoursRec === undefined) {
              hoursRec = Number(indexTime[indexTime.length - 4]);
              //  console.log("ok");
            } else {
              hoursRec = Number(
                indexTime[indexTime.length - 5] +
                  indexTime[indexTime.length - 4]
              );
            }

            let currentYear = new Date().getFullYear();
            let currentDate = Date.now();
            let dateRecordsMM = new Date(
              currentYear,
              monthRec,
              dateRec,
              hoursRec,
              minutesRec
            );
            let intervalTime = dateRecordsMM - currentDate - mmsHours * 9;
            console.log(intervalTime / mmsHours);
            if (intervalTime > 0) {
              setTimeout(async () => {
                let clientBaseIdAr = await gsapi.spreadsheets.values.get({
                  spreadsheetId: idSheets,
                  range: `${listSetting[0]}!A1:A`,
                });
                let clientBaseId = clientBaseIdAr.data.values.flat();
                for (let n = 0; n < clientBaseId.length; n++) {
                  if (`${clientBaseId[n]}` == `${chose.chat.id}`) {
                    let clientLastRecords = await gsapi.spreadsheets.values.get(
                      {
                        spreadsheetId: idSheets,
                        range: `${listSetting[0]}!H${n + 1}:N${n + 1}`,
                      }
                    );
                    let nameClient = clientLastRecords.data.values.flat()[0];
                    let indexMaster = clientLastRecords.data.values.flat()[3];
                    let indexService = clientLastRecords.data.values.flat()[4];
                    let indexDate = clientLastRecords.data.values.flat()[1];
                    let indexTime = clientLastRecords.data.values.flat()[2];
                    if (nameClient == "") {
                      //  chose.reply("–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                      return chose.scene.leave();
                      // break
                    } else {
                      chose.telegram.sendMessage(
                        chose.chat.id,
                        "–ü—Ä–∏–≤–µ—Ç—Å–≤—É–µ–º –≤–∞—Å " +
                          `${nameClient}` +
                          ". –ù–∞–ø–æ–º–∏–Ω–∞–µ–º –≤–∞–º, —á—Ç–æ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n–ú–∞—Å—Ç–µ—Ä: " +
                          `${indexMaster}` +
                          "\n–£—Å–ª—É–≥–∞: " +
                          `${indexService}` +
                          "\n–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏: " +
                          `${indexDate}` +
                          "\n–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏: " +
                          `${indexTime}`,
                        Markup.keyboard(deleteRecord).oneTime().resize()
                      );
                    }
                    break;
                  }
                }
              }, intervalTime);
            }
            return chose.scene.leave();
          } else {
            chose.telegram.sendMessage(
              chose.chat.id,
              "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —ç—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏. –í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: " +
                `${indexDate}` +
                ". \n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è",
              Markup.keyboard(anotherTime).oneTime().resize()
            );
          }
        } else {
          chose.telegram.sendMessage(
            chose.chat.id,
            '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –°–¥–µ–ª–∞–π—Ç–µ –≤—ã–±–æ—Ä –ø–æ –∫–Ω–æ–ø–∫–µ "–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å", –ª–∏–±–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ "—Å—Ç–∞—Ä—Ç" –∏–ª–∏ "–∑–∞–ø–∏—Å—å". –ü–∏—à–µ–º –±–µ–∑ –∫–∞–≤—ã—á–µ–∫',
            Markup.keyboard(recordNewButton).oneTime().resize()
          );
          return chose.scene.leave();
        }
      });
    });
    //-----------–ö–æ–Ω–µ—Ü –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞

    // ------------ –ó–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–∞ –∞–¥–º–∏–Ω–æ–º------------------------
    bot.on("message", async (chose) => {
      let checkMessage = chose.message.text;
      let changeService = ["–ó–∞–º–µ–Ω–∏—Ç—å —É—Å–ª—É–≥—É"];

      if (clientRecord.includes(checkMessage)) {
        metaData = await gsapi.spreadsheets.get({
          spreadsheetId: idSheets,
        });
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö —Ä–∞–±–æ—á–∏—Ö –ª–∏—Å—Ç–æ–≤

        let listSetting = new Array();
        for (i = 0; i < 2; i++) {
          listSetting.push(metaData.data.sheets[i].properties.title);
        }

        // –ù–∞—à–∏ —É—Å–ª—É–≥–∏
        let serviceListArr = await gsapi.spreadsheets.values.get({
          spreadsheetId: idSheets,
          range: `${listSetting[1]}!A2:A`,
        });
        serviceList = serviceListArr.data.values.flat();
        chose.telegram.sendMessage(
          chose.chat.id,
          "–ù–∞ –∫–∞–∫—É—é —É—Å–ª—É–≥—É –∑–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞",
          Markup.keyboard(serviceList).oneTime().resize()
        );
      } else if (serviceList.includes(checkMessage)) {
        listSheet = [];
        sheets = metaData.data.sheets;
        for (let i = 2; i < sheets.length; i++) {
          listSheet.push(metaData.data.sheets[i].properties.title);
        }

        listSheetButton = listSheet.concat(changeService);
        indexService = chose.update.message.text;
        chose.telegram.sendMessage(
          chose.chat.id,
          "–ö –∫–∞–∫–æ–º—É –º–∞—Å—Ç–µ—Ä—É –∑–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞",
          Markup.keyboard(listSheetButton).oneTime().resize()
        );
      } else if (changeService.includes(checkMessage)) {
        chose.telegram.sendMessage(
          chose.chat.id,
          "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —É—Å–ª—É–≥—É –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞",
          Markup.keyboard(serviceList).oneTime().resize()
        );
      } else if (anotherMaster.includes(checkMessage)) {
        chose.telegram.sendMessage(
          chose.chat.id,
          "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞:",
          Markup.keyboard(listSheetButton).oneTime().resize()
        );
      } else if (listSheet.includes(checkMessage)) {
        indexMaster = chose.update.message.text;
        chose.telegram.sendMessage(
          chose.chat.id,
          "–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–∞—Å—Ç–µ—Ä–∞: " +
            `${indexMaster}` +
            "\n" +
            "–ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞–ª–∏—á–∏–µ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–∞—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏"
        );
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π –∏–∑ —Å—Ç—Ä–æ–∫–∏ 2 —Å –¥–∞—Ç–∞–º–∏
        dataSheets = await gsapi.spreadsheets.values.get({
          spreadsheetId: idSheets,
          range: `${indexMaster}!2:2`,
        });
        dateArr = dataSheets.data.values.flat();
        let columns = 1;
        for (let i = 0; i < dateArr.length; i++) {
          if (
            new Date().getMonth() + 1 + "/" + new Date().getDate() ===
            dateArr[i]
          ) {
            columns = columns + i;
            break;
          }
        }
        // ---------------------------
        let timeCurrentcheck = moment().format();
        let dateCheck = timeCurrentcheck[timeCurrentcheck.length - 14];
        if (dateCheck === "0") {
          dateCheck = Number(timeCurrentcheck[timeCurrentcheck.length - 13]);
        } else {
          dateCheck = Number(
            timeCurrentcheck[timeCurrentcheck.length - 14] +
              timeCurrentcheck[timeCurrentcheck.length - 13]
          );
        }
        dateCheck = dateCheck + 8;
        if (dateCheck > 19) {
          columns = columns + 1;
        }
        //---------------------------
        //–ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
        // –ò—â–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ –¥–∞—Ç—ã
        let dateFree = [];
        let dataColumn1 = await gsapi.spreadsheets.values.get({
          spreadsheetId: idSheets,
          range: `${indexMaster}!R3C${columns}:R26C${dateArr.length}`,
        });
        let dateList = dataColumn1.data.values;
        //  console.log(dateArr.length);
        //  console.log(columns);
        for (i = 0; i <= dateArr.length - columns; i++) {
          //console.log(i);
          for (b = 1; b < 24; b++) {
            if (dateList[b][i] == "") {
              dateFree = dateFree.concat(dateList[0][i]);

              break;
            }
          }
        }
        //  dateList = dataColumn.data.values.flat();
        dateListButton = anotherMaster.concat(dateFree);
        currentDay = dateList[0][0];
        //  console.log(currentDay);
        chose.telegram.sendMessage(
          chose.chat.id,
          "–°–≤–æ–±–æ–¥–Ω—ã–µ –¥–∞—Ç—ã. –£—Ç–æ—á–Ω–∏—Ç–µ, –Ω–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –∑–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞",
          Markup.keyboard(dateListButton).oneTime().resize()
        );
      } else if (anotherDate.includes(checkMessage)) {
        chose.telegram.sendMessage(
          chose.chat.id,
          "–ö–ª–∏–µ–Ω—Ç –≤—ã–±—Ä–∞–ª –º–∞—Å—Ç–µ—Ä–∞: " +
            `${indexMaster}` +
            "\n" +
            "–ü–æ–¥–±–∏—Ä–∏—Ç–µ –¥–ª—è –Ω–µ–≥–æ –¥—Ä—É–≥—É—é –ø–æ–¥—Ö–æ–¥—è—â—É—é –¥–∞—Ç—É",
          Markup.keyboard(dateListButton).oneTime().resize()
        );
      } else if (checkMessage == currentDay) {
        indexDate = chose.update.message.text;

        let timeCurrent = moment().format();

        let timeCheck = timeCurrent[timeCurrent.length - 14];
        if (timeCheck === "0") {
          timeCheck = Number(timeCurrent[timeCurrent.length - 13]);
        } else {
          timeCheck = Number(
            timeCurrent[timeCurrent.length - 14] +
              timeCurrent[timeCurrent.length - 13]
          );
        }
        timeCheck = timeCheck + 8;
        if (timeCheck >= 19) {
          timeCheck = 8;
        }
        let dataBaseSheet = await gsapi.spreadsheets.values.batchGet({
          spreadsheetId: idSheets,
          ranges: [`${indexMaster}!A4:A`, `${indexMaster}!3:3`],
        });
        dateSheets = dataBaseSheet.data.valueRanges[1].values.flat();
        numberRecords = dataBaseSheet.data.valueRanges[0].values.length;
        timeArray = dataBaseSheet.data.valueRanges[0].values.flat();

        let time = "";
        let row = 0;
        for (i = 0; i < timeArray.length; i++) {
          if (timeArray[i][0] === "1") {
            time = timeArray[i][0] + timeArray[i][1];
            //  console.log(Number(time));
            row = row + 1;
          } else {
            time = timeArray[i][0];
            //  console.log(Number(time));
            row = row + 1;
          }

          if (Number(time) === Number(timeCheck)) {
            //  console.log(row);
            break;
          }
        }
        // –û–ø—Ä–µ–¥–µ–ª–∏–º –∫–æ–ª–æ–Ω–∫—É —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
        let column = 1;
        for (let i = 0; i < dateSheets.length; i++) {
          if (indexDate === dateSheets[i]) {
            column = column + i;
            break;
          }
        }

        indexColumn = column;
        //console.log(column);
        let timeColumn = await gsapi.spreadsheets.values.get({
          spreadsheetId: idSheets,
          range: `${indexMaster}!R4C${column}:R${numberRecords + 4}C${column}`,
        });

        //–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è
        let timeArr = [];
        for (i = row + 2; i < numberRecords + 4; i++) {
          if (timeColumn.data.values[i] == "") {
            let itemss = timeArray[i];
            timeArr = timeArr.concat(itemss);
          }
        }
        //–î–æ–±–∞–≤–ª–µ–º –∫ –º–∞—Å—Å–∏–≤—É –≤—Ä–µ–º–µ–Ω–∏ –≤–æ–∑–≤—Ä–∞—Ç –∫ –¥–∞—Ç–µ
        let items = timeArr;
        let itemsDop = ["–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É"];
        Array.prototype.push.apply(items, itemsDop);
        //let dateList = dataColumn.data.values.flat();
        chose.telegram.sendMessage(
          chose.chat.id,
          "–ö–ª–∏–µ–Ω—Ç –≤—ã–±—Ä–∞–ª –¥–∞—Ç—É: " +
            `${indexDate}` +
            "\n–£—Ç–æ—á–Ω–∏—Ç–µ, –Ω–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –µ–≥–æ –∑–∞–ø–∏—Å–∞—Ç—å",
          Markup.keyboard(items).oneTime().resize()
        );
        //});
      } else if (dateList.includes(checkMessage)) {
        indexDate = chose.update.message.text;
        //  let numberRecordsArr = await gsapi.spreadsheets.values.get({
        //    spreadsheetId: idSheets,
        //    range: `${listSheet[0]}!A4:A`,
        //  });
        //  numberRecords = numberRecordsArr.data.values.length;
        //  let dateSheetsArr = await gsapi.spreadsheets.values.get({
        //    spreadsheetId: idSheets,
        //    range: `${listSheet[0]}!3:3`,
        //  });
        //  dateSheets = dateSheetsArr.data.values.flat();
        //  timeArray = numberRecordsArr.data.values.flat();
        let dataBaseSheet = await gsapi.spreadsheets.values.batchGet({
          spreadsheetId: idSheets,
          ranges: [`${indexMaster}!A4:A`, `${indexMaster}!3:3`],
        });
        dateSheets = dataBaseSheet.data.valueRanges[1].values.flat();
        numberRecords = dataBaseSheet.data.valueRanges[0].values.length;
        timeArray = dataBaseSheet.data.valueRanges[0].values.flat();
        let column = 1;
        for (let i = 0; i < dateArr.length; i++) {
          if (indexDate === dateSheets[i]) {
            column = column + i;
            break;
          }
        }

        // –û–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –∫–æ–ª–æ–Ω–∫—É —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–æ–π
        indexColumn = column;
        //  console.log(column);
        let timeColumn = await gsapi.spreadsheets.values.get({
          spreadsheetId: idSheets,
          range: `${indexMaster}!R4C${column}:R${numberRecords + 4}C${column}`,
        });

        //–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è
        let timeArr = [];
        for (i = 0; i < numberRecords + 4; i++) {
          if (timeColumn.data.values[i] == "") {
            let itemss = timeArray[i];
            timeArr = timeArr.concat(itemss);
          }
        }
        //–î–æ–±–∞–≤–ª–µ–º –∫ –º–∞—Å—Å–∏–≤—É –≤—Ä–µ–º–µ–Ω–∏ –≤–æ–∑–≤—Ä–∞—Ç –∫ –¥–∞—Ç–µ
        let items = timeArr;
        let itemsDop = ["–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É"];
        Array.prototype.push.apply(items, itemsDop);
        //let dateList = dataColumn.data.values.flat();
        chose.telegram.sendMessage(
          chose.chat.id,
          "–ö–ª–∏–µ–Ω—Ç –≤—ã–±—Ä–∞–ª –¥–∞—Ç—É: " +
            `${indexDate}` +
            ". \n–£—Ç–æ—á–Ω–∏—Ç–µ, –Ω–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –µ–≥–æ –∑–∞–ø–∏—Å–∞—Ç—å",
          Markup.keyboard(items).oneTime().resize()
        );
        //});
      } else if (anotherTime.includes(checkMessage)) {
        //  let numberRecordsArr = await gsapi.spreadsheets.values.get({
        //    spreadsheetId: idSheets,
        //    range: `${listSheet[0]}!A4:A`,
        //  });
        //  numberRecords = numberRecordsArr.data.values.length;
        //  let dateSheetsArr = await gsapi.spreadsheets.values.get({
        //    spreadsheetId: idSheets,
        //    range: `${listSheet[0]}!3:3`,
        //  });
        //  dateSheets = dateSheetsArr.data.values.flat();
        //  timeArray = numberRecordsArr.data.values.flat();
        let dataBaseSheet = await gsapi.spreadsheets.values.batchGet({
          spreadsheetId: idSheets,
          ranges: [`${indexMaster}!A4:A`, `${indexMaster}!3:3`],
        });
        dateSheets = dataBaseSheet.data.valueRanges[1].values.flat();
        numberRecords = dataBaseSheet.data.valueRanges[0].values.length;
        timeArray = dataBaseSheet.data.valueRanges[0].values.flat();
        let column = 1;
        for (let i = 0; i < dateSheets.length; i++) {
          if (indexDate === dateSheets[i]) {
            column = column + i;
            break;
          }
        }
        // –û–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –∫–æ–ª–æ–Ω–∫—É —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–æ–π
        //console.log(column);
        indexColumn = column;

        let timeColumn = await gsapi.spreadsheets.values.get({
          spreadsheetId: idSheets,
          range: `${indexMaster}!R4C${column}:R${numberRecords + 4}C${column}`,
        });

        //–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è
        let timeArr = [];
        for (i = 0; i < numberRecords + 4; i++) {
          if (timeColumn.data.values[i] == "") {
            let itemss = timeArray[i];
            timeArr = timeArr.concat(itemss);
          }
        }
        //–î–æ–±–∞–≤–ª–µ–º –∫ –º–∞—Å—Å–∏–≤—É –≤—Ä–µ–º–µ–Ω–∏ –≤–æ–∑–≤—Ä–∞—Ç –∫ –¥–∞—Ç–µ
        let items = timeArr;
        let itemsDop = ["–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É"];
        Array.prototype.push.apply(items, itemsDop);
        //let dateList = dataColumn.data.values.flat();
        chose.telegram.sendMessage(
          chose.chat.id,
          "–ö–ª–∏–µ–Ω—Ç –≤—ã–±—Ä–∞–ª –¥–∞—Ç—É: " +
            `${indexDate}` +
            ". \n–ù–∞–π–¥–∏—Ç–µ –¥–ª—è –Ω–µ–≥–æ –¥—Ä—É–≥–æ–µ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è.",
          Markup.keyboard(items).oneTime().resize()
        );
        //});
      } else if (timeArray.includes(checkMessage)) {
        indexTime = chose.update.message.text;

        let rowTime = 4;
        for (i = 0; i < timeArray.length; i++) {
          if (indexTime == timeArray[i]) {
            rowTime = rowTime + i;
            indexRow = rowTime;
            break;
          }
        }
        //  let pointNameClient = ["–£–∫–∞–∂–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞"];
        chose.telegram.sendMessage(
          chose.chat.id,
          "–ö–ª–∏–µ–Ω—Ç –≤—ã–±—Ä–∞–ª: \n–ú–∞—Å—Ç–µ—Ä: " +
            `${indexMaster}` +
            "\n–£—Å–ª—É–≥–∞: " +
            `${indexService}` +
            "\n–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏: " +
            `${indexDate}` +
            "\n–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏: " +
            `${indexTime}` +
            '\n(–£—Ç–æ—á–Ω—è–µ–º  –∫–ª–∏–µ–Ω—Ç–∞ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞–∂–∏–º–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É "–£–∫–∞–∑–∞—Ç—å –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞". –ò–º—è –≤–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É )',
          Markup.keyboard(pointNameClient).oneTime().resize()
        );
        return chose.scene.leave();
      } else if (confirmRecordAdmin.includes(checkMessage)) {
        let listSetting = new Array();
        for (i = 0; i < 2; i++) {
          listSetting.push(metaData.data.sheets[i].properties.title);
        }
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ –≤—Ä–µ–º—è –∏–ª–∏ –Ω–µ—Ç
        let checkFreeArr = await gsapi.spreadsheets.values.get({
          spreadsheetId: idSheets,
          range: `${indexMaster}!R${indexRow}C${indexColumn}:R${indexRow}C${indexColumn}`,
        });
        let checkFree = checkFreeArr.data.values;
        if (checkFree === undefined) {
          let dateRecord = {
            values: [
              "–ö–ª–∏–µ–Ω—Ç: " + `${nameClient}` + "\n–£—Å–ª—É–≥–∞: " + `${indexService}`,
            ],
          };
          const updateOptions = {
            spreadsheetId: idSheets,
            range: `${indexMaster}!R${indexRow}C${indexColumn}:R${indexRow}C${indexColumn}`,
            valueInputOption: "USER_ENTERED",
            resource: { values: dateRecord },
          };
          await gsapi.spreadsheets.values.update(updateOptions);

          //–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
          adminChatIdArr = await gsapi.spreadsheets.values.get({
            spreadsheetId: idSheets,
            range: `${listSetting[0]}!E1:E`,
          });
          let adminMessage = adminChatIdArr.data.values.flat();
          for (let m = 1; m < adminMessage.length; m++) {
            chose.telegram.sendMessage(
              adminMessage[m],
              "–ü–æ—è–≤–∏–ª–∞—Å—å –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å:\n–ú–∞—Å—Ç–µ—Ä: " +
                `${indexMaster}` +
                "\n–ö–ª–∏–µ–Ω—Ç: " +
                `${nameClient}` +
                "\n–£—Å–ª—É–≥–∞: " +
                `${indexService}` +
                "\n–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏: " +
                `${indexDate}` +
                "\n–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏: " +
                `${indexTime}`,
              // "\n–¢–µ–ª–µ—Ñ–æ–Ω: " +
              // `${indexPhone}` +
              // "\nID: " +
              // `${chose.chat.id}`,
              Markup.keyboard(adminMenu).oneTime().resize()
            );
          }
          //–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞
          let masterNameArr = await gsapi.spreadsheets.values.get({
            spreadsheetId: idSheets,
            range: `${listSetting[0]}!G1:G`,
          });
          let masterName = masterNameArr.data.values.flat();
          for (let m = 1; m < masterName.length; m++) {
            if (`${masterName[m]}` == `${indexMaster}`) {
              let masterIdArr = await gsapi.spreadsheets.values.get({
                spreadsheetId: idSheets,
                range: `${listSetting[0]}!F1:F`,
              });
              let masterId = masterIdArr.data.values.flat()[m];
              chose.telegram.sendMessage(
                masterId,
                "–ü–æ—è–≤–∏–ª–∞—Å—å –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å: " +
                  "\n–ö–ª–∏–µ–Ω—Ç: " +
                  `${nameClient}` +
                  "\n–£—Å–ª—É–≥–∞: " +
                  `${indexService}` +
                  "\n–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏: " +
                  `${indexDate}` +
                  "\n–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏: " +
                  `${indexTime}`
              );
              break;
            }
          }
          return chose.scene.leave();
        } else {
          chose.telegram.sendMessage(
            chose.chat.id,
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —ç—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏. –í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: " +
              `${indexDate}` +
              ". \n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è",
            Markup.keyboard(anotherTime).oneTime().resize()
          );
        }
      } else {
        chose.telegram.sendMessage(
          chose.chat.id,
          '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –°–¥–µ–ª–∞–π—Ç–µ –≤—ã–±–æ—Ä –ø–æ –∫–Ω–æ–ø–∫–∞–º, –ª–∏–±–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ "—Å—Ç–∞—Ä—Ç" –∏–ª–∏ "–∑–∞–ø–∏—Å—å". –ü–∏—à–µ–º –±–µ–∑ –∫–∞–≤—ã—á–µ–∫'
        );
        return;
      }
      // });
    });
    //  –∑–∞–ø–∏—Å—å –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞
    nameClientSce.enter(async (chose) => {
      await chose.reply("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º");
      nameClientSce.on("message", (chose) => {
        let checkName = chose.message.text;
        let checkAnswer = /^[–∞-—è–ê-–Ø—ë–Åa-zA-Z0-9]+$/;

        if (checkAnswer.test(checkName)) {
          nameClient = chose.message.text;
          let buttonTime = ["–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–∞"];
          chose.reply(
            "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–∞",
            Markup.keyboard(buttonTime).oneTime().resize()
          );
          return chose.scene.leave();
        } else {
          chose.telegram.sendMessage(chose.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è");
        }
      });
    });
    //--------------------------------- –∑–¥–µ—Å—å –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –∑–∞–ø–∏—Å—å –∫–ª–µ–Ω—Ç–∞ –∞–¥–º–∏–Ω–æ–º

    //  –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–æ–º
    removeChoice.enter(async (chose) => {
      let removeConfirmChoice = ["–î–∞, —É–¥–∞–ª–∏—Ç—å", "–ó–∞–ø–∏—Å—å –Ω–µ —É–¥–∞–ª—è—Ç—å"];

      chose.telegram.sendMessage(
        chose.chat.id,
        '–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–∞, —É–¥–∞–ª–∏—Ç—å". –ï—Å–ª–∏ –≤—ã –Ω–∞–∂–∞–ª–∏ –æ—à–∏–±–æ—á–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ "–ó–∞–ø–∏—Å—å –Ω–µ —É–¥–∞–ª—è—Ç—å"',
        Markup.keyboard(removeConfirmChoice).oneTime().resize()
      );
    });
    removeChoice.on("message", async (chose) => {
      let answer = chose.update.message.text;
      let removeConfirm = ["–î–∞, —É–¥–∞–ª–∏—Ç—å"];
      let noremoveConfirm = ["–ó–∞–ø–∏—Å—å –Ω–µ —É–¥–∞–ª—è—Ç—å"];
      if (removeConfirm.includes(answer)) {
        let clientBaseIdAr = await gsapi.spreadsheets.values.get({
          spreadsheetId: idSheets,
          range: `${listSetting[0]}!A1:A`,
        });
        let clientBaseId = clientBaseIdAr.data.values.flat();
        for (let n = 0; n < clientBaseId.length; n++) {
          if (`${clientBaseId[n]}` == `${chose.chat.id}`) {
            let clientLastRecords = await gsapi.spreadsheets.values.get({
              spreadsheetId: idSheets,
              range: `${listSetting[0]}!H${n + 1}:N${n + 1}`,
            });
            let nameClient = clientLastRecords.data.values.flat()[0];
            let indexMaster = clientLastRecords.data.values.flat()[3];
            let indexService = clientLastRecords.data.values.flat()[4];
            let indexDate = clientLastRecords.data.values.flat()[1];
            let indexTime = clientLastRecords.data.values.flat()[2];
            let indexRow = clientLastRecords.data.values.flat()[5];
            let indexColumn = clientLastRecords.data.values.flat()[6];
            let deleteValuesWork = { values: ["", "", "", "", "", "", ""] };
            const updateOptions1 = {
              spreadsheetId: idSheets,
              range: `${listSetting[0]}!R${n + 1}C8:R${n + 1}C14`,
              valueInputOption: "USER_ENTERED",
              resource: { values: deleteValuesWork },
            };
            await gsapi.spreadsheets.values.update(updateOptions1);
            //break;
            // }
            //  }
            const updateOptionsDelete = {
              spreadsheetId: idSheets,
              range: `${indexMaster}!R${indexRow}C${indexColumn}:R${indexRow}C${indexColumn}`,
              valueInputOption: "USER_ENTERED",
              resource: { values: deleteValues },
            };
            await gsapi.spreadsheets.values.update(updateOptionsDelete);

            chose.telegram.sendMessage(
              chose.chat.id,
              '–ú—ã —É–¥–∞–ª–∏–ª–∏ –≤–∞—à—É –∑–∞–ø–∏—Å—å. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥—É—é –¥–∞—Ç—É. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å" –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ "–∑–∞–ø–∏—Å—å" (–ø–∏—à–µ–º –±–µ–∑ –∫–∞–≤—ã—á–µ–∫).',
              Markup.keyboard(recordNewButton).oneTime().resize()
            );

            adminChatIdArr = await gsapi.spreadsheets.values.get({
              spreadsheetId: idSheets,
              range: `${listSetting[0]}!E1:E`,
            });
            let adminMessage = adminChatIdArr.data.values.flat();
            for (let m = 1; m < adminMessage.length; m++) {
              chose.telegram.sendMessage(
                adminMessage[m],
                "–ë—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ —Å–ª–µ–¥—É—é—â–∞—è –∑–∞–ø–∏—Å—å:\n–ú–∞—Å—Ç–µ—Ä: " +
                  `${indexMaster}` +
                  "\n–ö–ª–∏–µ–Ω—Ç: " +
                  `${nameClient}` +
                  "\n–£—Å–ª—É–≥–∞: " +
                  `${indexService}` +
                  "\n–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏: " +
                  `${indexDate}` +
                  "\n–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏:" +
                  `${indexTime}`
              );
            }
            //–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞
            let masterNameArr = await gsapi.spreadsheets.values.get({
              spreadsheetId: idSheets,
              range: `${listSetting[0]}!G1:G`,
            });
            masterName = masterNameArr.data.values.flat();
            for (let m = 1; m < masterName.length; m++) {
              if (`${masterName[m]}` == `${indexMaster}`) {
                masterIdArr = await gsapi.spreadsheets.values.get({
                  spreadsheetId: idSheets,
                  range: `${listSetting[0]}!F1:F`,
                });
                masterId = masterIdArr.data.values.flat()[m];
                chose.telegram.sendMessage(
                  masterId,
                  "–ë—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ —Å–ª–µ–¥—É—é—â–∞—è –∑–∞–ø–∏—Å—å: " +
                    "\n–ö–ª–∏–µ–Ω—Ç: " +
                    `${nameClient}` +
                    "\n–£—Å–ª—É–≥–∞: " +
                    `${indexService}` +
                    "\n–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏: " +
                    `${indexDate}` +
                    "\n–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏:" +
                    `${indexTime}`
                );
                break;
              }
            }
            break;
          }
        }
        return chose.scene.leave();
      } else if (noremoveConfirm.includes(answer)) {
        chose.telegram.sendMessage(
          chose.chat.id,
          "–û—Ç–ª–∏—á–Ω–æ –≤–∞—à–∞ –∑–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞",
          Markup.keyboard(deleteRecord).oneTime().resize()
        );
        return chose.scene.leave();
      }
    });
    worker.enter(async (ctx) => {
      let menuAdmin = ["–í—ã–±—Ä–∞—Ç—å –µ—â–µ –º–∞—Å—Ç–µ—Ä–∞"];
      let backMenu = ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é"];
      //---------------------------
      let dataColumnAll = await gsapi.spreadsheets.values.get({
        spreadsheetId: idSheets,
        range: `${listSheet[0]}!2:2`,
      });
      console.log(dataColumnAll.data.values.flat().length);
      //-----------------------------
      //–ü–æ–ª—É—á–∞–µ–º ID –ª–∏—Å—Ç–æ–≤
      let numberCol = 0;
      let listId = new Array();
      for (i = 2; i < metaData.data.sheets.length; i++) {
        listId.push(metaData.data.sheets[i].properties.sheetId);
      }

      ctx.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞",
        Markup.keyboard(listSheet).oneTime().resize()
      );
      worker.on("message", async (ctx) => {
        let answerMaster = ctx.update.message.text;
        let indexId = 0;
        let indexIdSheets;
        let menuAdmin1 = menuAdmin.concat(backMenu);

        for (i = 0; i < listSheet.length; i++) {
          if (answerMaster == listSheet[i]) {
            indexId = i;
            indexIdSheets = listId[i];
            break;
          }
        }

        if (listSheet.includes(answerMaster)) {
          let dataColumnAll = await gsapi.spreadsheets.values.get({
            spreadsheetId: idSheets,
            range: `${answerMaster}!2:2`,
          });
          let dataColumnArr = await gsapi.spreadsheets.values.get({
            spreadsheetId: idSheets,
            range: `${answerMaster}!3:3`,
          });
          let dataColumnArrOne = dataColumnArr.data.values.flat()[1];
          //---------------------------------------------
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ 2 —Å –¥–∞—Ç–∞–º–∏
          //–ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∫–æ–ª–æ–Ω–∫–∏ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
          let columns = 1;
          for (let i = 0; i < dataColumnAll.data.values.flat().length; i++) {
            if (
              new Date().getMonth() + 1 + "/" + new Date().getDate() ===
              dataColumnAll.data.values.flat()[i]
            ) {
              columns = columns + i;
              break;
            }
          }

          // ---------------------------
          let timeCurrentcheck = moment().format();
          let dateCheck = timeCurrentcheck[timeCurrentcheck.length - 14];
          if (dateCheck === "0") {
            dateCheck = Number(timeCurrentcheck[timeCurrentcheck.length - 13]);
          } else {
            dateCheck = Number(
              timeCurrentcheck[timeCurrentcheck.length - 14] +
                timeCurrentcheck[timeCurrentcheck.length - 13]
            );
          }
          dateCheck = dateCheck + 8;
          if (dateCheck > 19) {
            columns = columns + 1;
          }

          if (
            dataColumnAll.data.values.flat()[columns - 1] ==
            dataColumnAll.data.values.flat()[1]
          ) {
            ctx.reply(
              "–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É. –û–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É —É –¥—Ä—É–≥–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é",
              Markup.keyboard(menuAdmin1).oneTime().resize()
            );
            return ctx.scene.leave();
          } else {
            //---------------------------
            //–û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–æ–ª–æ–Ω–∫—É —Å –¥–∞—Ç–æ–π –≤ —Ç–∞–±–ª–∏—Ü–µ

            let endIndex = dataColumnAll.data.values.flat().length - 1;
            let startIndex = endIndex - 1;
            //–ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
            let recordsNewDate = await gsapi.spreadsheets.values.get({
              spreadsheetId: idSheets,
              range: [`${answerMaster}!B1:B1`],
            });
            numberCol = Number(recordsNewDate.data.values.flat()[0]) + 1;
            // console.log(numberCol);
            let recordDateNew = {
              range: `${answerMaster}!B1:B2`,
              values: [[numberCol], ["=A1+B1"]],
            };
            const updateDateNew = {
              spreadsheetId: idSheets,
              valueInputOption: "USER_ENTERED",
              resource: { data: [recordDateNew] },
            };

            let recordDateNew2 = { values: ["=B2+1"] };
            const updateDateNew2 = {
              spreadsheetId: idSheets,
              range: `${answerMaster}!C2:C2`,
              valueInputOption: "USER_ENTERED",
              resource: { values: recordDateNew2 },
            };
            const resource = {
              requests: [
                {
                  deleteDimension: {
                    range: {
                      sheetId: indexIdSheets,
                      dimension: "COLUMNS",
                      startIndex: 2,
                      endIndex: 3,
                    },
                  },
                },
              ],
            };
            const resource1 = {
              requests: [
                {
                  insertDimension: {
                    range: {
                      sheetId: indexIdSheets,
                      dimension: "COLUMNS",
                      startIndex: startIndex,
                      endIndex: endIndex,
                    },
                    inheritFromBefore: true,
                  },
                },
              ],
            };
            const response = await gsapi.spreadsheets.batchUpdate({
              spreadsheetId: idSheets,
              resource: resource,
            });
            const response1 = await gsapi.spreadsheets.batchUpdate({
              spreadsheetId: idSheets,
              resource: resource1,
            });

            let letterSheet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
            //–ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ—Å—á–∏—Ç–∞—Ç—å –Ω–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ –∑–∞–ø–∏—Å–∏
            //let a = 13;
            let index;
            let indexNewColumns;
            for (i = 0; i < letterSheet.length; i++) {
              if (i === endIndex) {
                index = letterSheet[i - 2];
                indexNewColumns = letterSheet[i - 1];
                break;
              }
            }
            console.log(index);
            console.log(indexNewColumns);

            let record3 = {
              values: [`=${indexNewColumns}2`],
            };
            let record4 = {
              range: `${answerMaster}!${indexNewColumns}2:${indexNewColumns}3`,
              values: [
                [`=${index}2+1`],
                [`=–ü–†–û–ü–ò–°–ù(–¢–ï–ö–°–¢(${indexNewColumns}2; "[$-F800]dddd dd.mm"))`],
              ],
            };
            const updateOptions = {
              spreadsheetId: idSheets,
              valueInputOption: "USER_ENTERED",
              resource: { data: [record4] },
            };
            await gsapi.spreadsheets.values.batchUpdate(updateOptions);

            const updateOptions3 = {
              spreadsheetId: idSheets,
              range: `${answerMaster}!${indexNewColumns}27:${indexNewColumns}27`,
              valueInputOption: "USER_ENTERED",
              resource: { values: record3 },
            };
            await gsapi.spreadsheets.values.batchUpdate(updateDateNew);
            await gsapi.spreadsheets.values.update(updateDateNew2);
            await gsapi.spreadsheets.values.update(updateOptions3);
            //  let menuAdmin = ["–í—ã–±—Ä–∞—Ç—å –µ—â–µ –º–∞—Å—Ç–µ—Ä–∞", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é"];
            ctx.reply(
              `–í—ã —É–¥–∞–ª–∏–ª–∏ —Å–ª–µ–¥—É—é—â—É—é –¥–∞—Ç—É: ${dataColumnArrOne}. \n–û–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É —É –¥—Ä—É–≥–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é`,
              Markup.keyboard(menuAdmin1).oneTime().resize()
            );
            return ctx.scene.leave();
          }
        } else if (answerMaster == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é") {
          ctx.reply(
            "–í—ã–±–∏—Ä–∞–π—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–∞–º",
            Markup.keyboard(adminMenu).oneTime().resize()
          );
          return ctx.scene.leave();
        }
      });
    });
  } catch (e) {
    console.error(e);
  }
}
